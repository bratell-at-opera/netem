#!/bin/bash

function printHelp {
    if [ -n "$2" ]; then
        echo "ERROR: $2"
        echo ""
    else
        echo "netem - Simulates a bottleneck link of your choise."
    fi
    echo
    echo "Usage:"
    echo "      $(basename $1) arguments"
    echo ""
    echo "--delay-dl= / --delay-ul="
    echo "      Specify the average delay in ms on the down-link/up-link. "
    echo ""
    echo "--delay-deviation-dl= / --delay-deviation-ul="
    echo "      Specify the standard deviation of the delay as ms on the down-link/up-link. "
    echo ""
    echo "--loss-rate-dl= / --loss-rate-ul="
    echo "      Specify the loss rate on the down-link/up-link. "
    echo ""
    echo "--bandwidth-dl= / --bandwidth-ul="
    echo "      Specify the available bandwidth on the down-link/up-link. "
    exit 1
}

if [ "$USER" != "root" ]; then
    printHelp $0 "Must be run as root!"
fi

netemFolder="$(realpath $(dirname $0))/.."
myUser=$SUDO_USER
userShell=$(getent passwd $myUser | cut -d: -f7)
lockFile=/tmp/netem.lock
initiator=false
limitArgs=""


# Set extblog extension in bash in order for case-switch to work (disabled when executing script)
shopt -s extglob
# Handle in-arguments
for argument in "$@"
do
    case $argument in
        # Debug mode does not initialize a virtual display
        --loss-rate-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        --delay-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        --delay-deviation-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        --bandwidth-@(dl|ul)=*)
            limitArgs="$limitArgs $argument"
            shift
            ;;
        *)
            printHelp $0 "Invalid argument: $argument"
            ;;
    esac
done

# ----------------- SETUP

if [ ! -f  $lockFile ]; then
    # If initiator we need to have gotten some link-limits
    if [ -z "$limitArgs" ]; then
        printHelp $0 "You havn't set any link limits!"
    fi

    # Make sure we can run netem again to get more shells
    initiator=true
    touch $lockFile
    # Setup link limits
    $netemFolder/share/netem/configure.bash
    if [ $? != 0 ]; then
        echo "ERROR: Failed to setup virtual network!"
        exit 3
    fi
    $netemFolder/share/netem/limit-bottleneck.bash $limitArgs
    if [ $? != 0 ]; then
        echo "ERROR: Failed to limit network links!"
        exit 3
    fi
fi

if [ "$initiator" = false ] && [ -n "$limitArgs" ]; then
    echo "ERROR: Please exit the former simulation before creating a new one!"
    echo ""
    echo "In order to create another shell in your currently running simulaiton, just run $0 without any arguments."
    exit 4
fi

# ------------------ RUN

ip netns exec netem-ns sudo --user=$myUser /bin/bash --rcfile $netemFolder/share/netem/ps1-setup.bash

# ----------------- TEARDOWN
if [ "$initiator" = true ]; then
    $netemFolder/share/netem/teardown.bash
    rm $lockFile
fi

